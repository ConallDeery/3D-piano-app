#version 330 core

layout (location = 0) in vec3 vertex_position;
layout (location = 1) in vec3 vertex_normal;

out vec3 diffuse;
out vec3 specular;

vec4 LightPosition = vec4(0.0, 0.0, 0.0, 1.0); // light source position
vec3 Ld = vec3(1.0, 1.0, 1.0); // light source intensity
vec3 specularLight = vec3(0.5, 0.5, 0.5);

uniform vec3 view_pos;
//uniform float specular_coef;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;

void main()
{
	mat4 ModelViewMatrix = view * model;
  	mat3 NormalMatrix =  mat3(ModelViewMatrix);
	// Convert normal and position to eye coords
  	// Normal in view space
  	vec3 tnorm = normalize( NormalMatrix * vertex_normal);
	// Position in view space
  	vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  	//normalised vector towards the light source
 	vec3 s = normalize(vec3(LightPosition - eyeCoords));

  	// The diffuse shading equation, dot product gives us the cosine of angle between the vectors
  	diffuse = Ld * max( dot( s, tnorm ), 0.0 );
	
	// specular shading
	vec3 view_dir = normalize(view_pos - (vec3(model * vec4(vertex_position, 1.0))));
	vec3 reflect_dir = reflect(-s, tnorm);
	float spec_dot = max(dot(view_dir, reflect_dir), 0.0);
	float spec = pow (spec_dot, 64);
	specular = specularLight * spec;

	gl_Position = proj * view * model * vec4(vertex_position, 1.0);
	
}